<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.application.foodhub.post.PostDAO">

<resultMap id="postMap" type="hashmap">
		<result column="POST_ID"  	   	property="postId"/>
		<result column="TITLE" 	   		property="title"/>
		<result column="CATEGORY_NM"	property="cateNm"/>
		<result	column="SUB_CATE_NM"	property="subCateNm"/>
		<result	column="CATEGORY_ID"	property="categoryId"/>
		<result	column="SUB_CATE_ID"	property="subCateId"/>
		<result column="CONTENT" 	   	property="content"/>
		<result column="VIEW_CNT" 	   	property="viewCnt"/>
		<result column="CREATED_AT" 	property="createdAt"/>
		<result column="USER_ID"       	property="userId"/>
		<result column="NICKNAME"     	property="nickname"/>
		<result column="PROFILE_UUID"  	property="profileUUID"/>
		<result column="FILE_UUID"		property="fileUUID"/>
</resultMap>

<insert id="createPost" parameterType="PostDTO" useGeneratedKeys="true" keyProperty="postId">
    INSERT INTO POST (
        USER_ID,
        NICKNAME,
        CATEGORY_ID,
        CATEGORY_NM,
        SUB_CATE_ID,
        SUB_CATE_NM,
        TITLE,
        CONTENT,
        CREATED_AT
    ) VALUES (
        #{userId},
        #{nickname},
        #{categoryId},
        CASE 
            WHEN #{categoryId} = 1 THEN '외식업정보게시판'
            WHEN #{categoryId} = 2 THEN '자유게시판'
            WHEN #{categoryId} = 3 THEN '알바공고게시판'
            WHEN #{categoryId} = 4 THEN '질문게시판'
            WHEN #{categoryId} = 5 THEN '중고장비거래게시판'
            WHEN #{categoryId} = 6 THEN '매장홍보게시판'
            WHEN #{categoryId} = 7 THEN '협력업체게시판'
            ELSE NULL
        END,
        #{subCateId},
        CASE 
            WHEN #{subCateId} = 1 THEN '잡담'
            WHEN #{subCateId} = 2 THEN '일상이야기'
            WHEN #{subCateId} = 3 THEN '질문'
            WHEN #{subCateId} = 4 THEN '업계뉴스'
            WHEN #{subCateId} = 5 THEN '업체소식'
            WHEN #{subCateId} = 6 THEN '트렌드'
            WHEN #{subCateId} = 7 THEN '업계분석'
            WHEN #{subCateId} = 8 THEN '새로운 맛집'
            WHEN #{subCateId} = 9 THEN '직원 구인'
            WHEN #{subCateId} = 10 THEN '알바 구인'
            WHEN #{subCateId} = 11 THEN '구직'
            WHEN #{subCateId} = 12 THEN '업계 질문'
            WHEN #{subCateId} = 13 THEN '자유 질문'
            WHEN #{subCateId} = 14 THEN '도움 요청'
            WHEN #{subCateId} = 15 THEN '팁을 구합니다'
            WHEN #{subCateId} = 16 THEN '판매'
            WHEN #{subCateId} = 17 THEN '나눔'
            WHEN #{subCateId} = 18 THEN '교환'
            WHEN #{subCateId} = 19 THEN '구매희망'
            WHEN #{subCateId} = 20 THEN '매장 소개'
            WHEN #{subCateId} = 21 THEN '신규 오픈'
            WHEN #{subCateId} = 22 THEN '이벤트'
            WHEN #{subCateId} = 23 THEN '맛집 추천'
            WHEN #{subCateId} = 24 THEN '업체 소개'
            WHEN #{subCateId} = 25 THEN '협력 요청'
            ELSE NULL
        END,
        #{title},
        #{content},
        NOW()
    )
</insert>

	
	<select id="getPostCnt" resultType="long">
		SELECT COUNT(*)
		FROM   POST
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateReadCnt" parameterType="long">
		UPDATE	POST
		SET		VIEW_CNT = VIEW_CNT + 1
		WHERE	POST_ID = #{postId}
	</update>
	
	<select id="getPostList" resultMap="postMap">
	    SELECT  P.POST_ID AS POST_ID,
	        	P.TITLE AS TITLE,
	        	P.CREATED_AT AS CREATED_AT,
	       	 	P.VIEW_CNT AS VIEW_CNT,
	        	U.NICKNAME AS NICKNAME,
	        	S.SUB_CATE_NM AS SUB_CATE_NM,
	        	COALESCE(L.LIKE_COUNT, 0) AS LIKE_COUNT
	    FROM 	POST P
	    JOIN 	USER U ON P.USER_ID = U.USER_ID
	    JOIN 	SUB_CATEGORY S ON P.SUB_CATE_ID = S.SUB_CATE_ID
	    LEFT 	JOIN (  -- 서브쿼리 수정됨
	        	SELECT POST_ID, COUNT(*) AS LIKE_COUNT 
	        	FROM POST_LIKE 
	        	GROUP BY POST_ID
	    		) AS L ON P.POST_ID = L.POST_ID
	    ORDER BY P.CREATED_AT DESC
	    LIMIT 	#{pageSize} 
	    OFFSET 	#{offset}
	</select>

	
	
	<!-- 게시글 정보만 가져오기 (파일 제외) -->
	<select id="getPostDetail" parameterType="long" resultMap="postMap">
	    SELECT    P.POST_ID        AS POST_ID,
	              P.SUB_CATE_NM    AS SUB_CATE_NM,
	              P.TITLE          AS TITLE,
	              P.CATEGORY_ID    AS CATEGORY_ID,
	              P.SUB_CATE_ID    AS SUB_CATE_ID,
	              U.PROFILE_UUID   AS PROFILE_UUID,
	              U.USER_ID        AS USER_ID,
	              U.NICKNAME       AS NICKNAME,
	              P.CREATED_AT     AS CREATED_AT,
	              P.VIEW_CNT       AS VIEW_CNT,
	              P.CONTENT        AS CONTENT
	    FROM      POST P
	    JOIN      USER U
	      ON      P.USER_ID = U.USER_ID
	    WHERE     P.POST_ID = #{postId}
	</select>
	
	<select id="getAllPosts" parameterType="map" resultMap="postMap">
	    SELECT P.POST_ID 		AS POST_ID,
	           P.SUB_CATE_NM 	AS SUB_CATE_NM,
	           P.TITLE			AS TITLE,
	           U.NICKNAME		AS NICKNAME,
	           P.CREATED_AT		AS CREATED_AT,
	           P.VIEW_CNT		AS VIEW_CNT
	    FROM POST P
	    JOIN USER U ON P.USER_ID = U.USER_ID
	    ORDER BY P.CREATED_AT DESC
	    LIMIT #{pageSize} OFFSET #{startRow}
	</select>
	
	<!-- mypage에 내가 작성한 글 제목 출력 -->
   	<select id="myPostList" parameterType="String" resultMap="postMap">
	    SELECT  P.POST_ID   AS POST_ID, 
	            P.TITLE     AS TITLE
	    FROM    POST P
	    JOIN    USER U
	    ON      P.USER_ID = U.USER_ID
	    WHERE   P.USER_ID = #{userId}
	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="deletePost" parameterType="long">
		DELETE 	FROM POST
		WHERE		 POST_ID = #{postId}
	</delete>
	
	<update id="updatePost" parameterType="PostDTO">
	    UPDATE POST 
	    SET 
	        CATEGORY_ID = #{categoryId},
	        CATEGORY_NM = CASE 
	            WHEN #{categoryId} = 1 THEN '외식업정보게시판'
	            WHEN #{categoryId} = 2 THEN '자유게시판'
	            WHEN #{categoryId} = 3 THEN '알바공고게시판'
	            WHEN #{categoryId} = 4 THEN '질문게시판'
	            WHEN #{categoryId} = 5 THEN '중고장비거래게시판'
	            WHEN #{categoryId} = 6 THEN '매장홍보게시판'
	            WHEN #{categoryId} = 7 THEN '협력업체게시판'
	            ELSE CATEGORY_NM
	        END,
	        SUB_CATE_ID = #{subCateId},
	        SUB_CATE_NM = CASE 
	            WHEN #{subCateId} = 1 THEN '잡담'
	            WHEN #{subCateId} = 2 THEN '일상이야기'
	            WHEN #{subCateId} = 3 THEN '질문'
	            WHEN #{subCateId} = 4 THEN '업계뉴스'
	            WHEN #{subCateId} = 5 THEN '업체소식'
	            WHEN #{subCateId} = 6 THEN '트렌드'
	            WHEN #{subCateId} = 7 THEN '업계분석'
	            WHEN #{subCateId} = 8 THEN '새로운 맛집'
	            WHEN #{subCateId} = 9 THEN '직원 구인'
	            WHEN #{subCateId} = 10 THEN '알바 구인'
	            WHEN #{subCateId} = 11 THEN '구직'
	            WHEN #{subCateId} = 12 THEN '업계 질문'
	            WHEN #{subCateId} = 13 THEN '자유 질문'
	            WHEN #{subCateId} = 14 THEN '도움 요청'
	            WHEN #{subCateId} = 15 THEN '팁을 구합니다'
	            WHEN #{subCateId} = 16 THEN '판매'
	            WHEN #{subCateId} = 17 THEN '나눔'
	            WHEN #{subCateId} = 18 THEN '교환'
	            WHEN #{subCateId} = 19 THEN '구매희망'
	            WHEN #{subCateId} = 20 THEN '매장 소개'
	            WHEN #{subCateId} = 21 THEN '신규 오픈'
	            WHEN #{subCateId} = 22 THEN '이벤트'
	            WHEN #{subCateId} = 23 THEN '맛집 추천'
	            WHEN #{subCateId} = 24 THEN '업체 소개'
	            WHEN #{subCateId} = 25 THEN '협력 요청'
	            ELSE SUB_CATE_NM
	        END,
	        TITLE = #{title},
	        CONTENT = #{content},
	        UPDATED_AT = NOW()
	    WHERE POST_ID = #{postId}
	</update>
	
	<!-- 이전글 다음글을 눌렀을때 카테고리 아이디가 같은 경우의 postId 가져오기 -->
	<select id="getPrevPostId" resultType="long">
		<![CDATA[
	 	SELECT 		POST_ID
     	FROM 		POST
	    WHERE 		POST_ID  <  #{postId} 
      	AND 		CATEGORY_ID = #{categoryId}
      	ORDER BY 	POST_ID DESC
	    LIMIT 1
	    ]]>
	</select>
	
	<select id="getNextPostId" resultType="long">
		<![CDATA[
	    SELECT 		POST_ID
	    FROM 		POST
	    WHERE 		POST_ID > #{postId} 
      	AND 		CATEGORY_ID = #{categoryId}  
	    ORDER BY 	POST_ID ASC
	    LIMIT 1
	    ]]>	    
	</select>
	
	<select id="getPostListByCategory" resultMap="postMap">
       SELECT   P.POST_ID      AS POST_ID, 
              	S.SUB_CATE_NM   AS SUB_CATE_NM, 
              	P.TITLE      AS TITLE, 
              	U.NICKNAME      AS NICKNAME, 
              	P.CREATED_AT   AS CREATED_AT, 
              	P.VIEW_CNT      AS VIEW_CNT,
              	COALESCE(L.LIKE_COUNT, 0) AS LIKE_COUNT
       FROM     POST P
       JOIN     USER U ON P.USER_ID = U.USER_ID
       JOIN     SUB_CATEGORY S ON P.SUB_CATE_ID = S.SUB_CATE_ID
       LEFT JOIN (
            	SELECT 		POST_ID, COUNT(*) AS LIKE_COUNT 
            	FROM 		POST_LIKE 
            	GROUP BY 	POST_ID
        		) AS L ON P.POST_ID = L.POST_ID
       WHERE    P.CATEGORY_ID = #{categoryId}
       ORDER BY P.CREATED_AT DESC
       LIMIT    #{pageSize} OFFSET #{offset}
	</select>

	<select id="getPostCntByCategory" resultType="long">
    	SELECT COUNT(*) FROM POST WHERE CATEGORY_ID = #{categoryId}
	</select>

	<select id="getCategoryName" resultType="string">
    	SELECT CATEGORY_NM FROM POST_CATEGORY WHERE CATEGORY_ID = #{categoryId}
	</select>
	
	<!-- index용 카테고리 별로 최신글 2개 가져오기 -->
	<select id="getLatestPostsByCategoryId" resultMap="postMap">
	    SELECT	P.POST_ID      AS POST_ID, 
	        	S.SUB_CATE_NM  AS SUB_CATE_NM, 
	        	P.TITLE        AS TITLE, 
	        	U.NICKNAME     AS NICKNAME, 
	        	P.CREATED_AT   AS CREATED_AT, 
	        	COALESCE(L.LIKE_COUNT, 0) AS LIKE_COUNT
	    FROM 	POST P
	    JOIN 	USER U ON P.USER_ID = U.USER_ID
	    JOIN 	SUB_CATEGORY S ON P.SUB_CATE_ID = S.SUB_CATE_ID
	    LEFT 	JOIN (
	        		SELECT 		POST_ID, 
	        					COUNT(*) AS LIKE_COUNT 
	        		FROM 		POST_LIKE 
	        		GROUP BY 	POST_ID
	    		) AS L ON P.POST_ID = L.POST_ID
	    WHERE 	P.CATEGORY_ID = #{categoryId}
	    ORDER BY P.CREATED_AT DESC
	    LIMIT 2;
	</select>

</mapper>